# Generated by Django 5.0.6 on 2024-08-13 14:03

import django.db.models.deletion
import modelcluster.fields
import wagtail.blocks
import wagtail.contrib.forms.models
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0093_uploadedfile'),
    ]

    operations = [
        migrations.CreateModel(
            name='FooterInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('links_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='Enter a title for the links section in the footer.')),
                ('services_title', models.CharField(blank=True, help_text='Enter a title for the services section in the footer.', max_length=100, null=True)),
                ('subscribe_email_title', models.CharField(blank=True, help_text='Enter a title for the email subscription section in the footer.', max_length=100, null=True)),
                ('subscribe_email_body', models.CharField(blank=True, help_text='Enter the text or body content for the email subscription section in the footer.', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Footer Information',
                'verbose_name_plural': 'Footer Information',
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to these addresses. Separate multiple addresses by comma.', max_length=255, validators=[wagtail.contrib.forms.models.validate_to_address], verbose_name='to address')),
                ('from_address', models.EmailField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('introduction', models.TextField(blank=True, help_text=' Provide a brief introduction or overview for this form page.', null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('heading_block', wagtail.blocks.StructBlock([('heading_text', wagtail.blocks.CharBlock(form_classname='title', required=True)), ('size', wagtail.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], required=False))])), ('paragraph_block', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link'], icon='pilcrow', template='blocks/paragraph_block.html')), ('image_block', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.blocks.CharBlock(required=False)), ('attribution', wagtail.blocks.CharBlock(required=False))])), ('block_quote', wagtail.blocks.StructBlock([('text', wagtail.blocks.TextBlock()), ('attribute_name', wagtail.blocks.CharBlock(blank=True, label='e.g. John Doe', required=False))])), ('embed_block', wagtail.embeds.blocks.EmbedBlock(help_text='Insert an embed URL', icon='media', template='blocks/embed_block.html'))], blank=True, help_text='Compose the main content for this form page using various content blocks.', null=True, verbose_name='Page Body')),
                ('thank_you_text', wagtail.fields.RichTextField(blank=True, help_text='Customize the message displayed to users after submitting the form.', verbose_name='Thank You Text')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.forms.models.FormMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='GenericSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('twitter_url', models.URLField(blank=True, null=True, verbose_name='Twitter URL')),
                ('facebook_url', models.URLField(blank=True, null=True, verbose_name='Facebook URL')),
                ('instagram_url', models.URLField(blank=True, null=True, verbose_name='Instagram URL')),
                ('tiktok_url', models.URLField(blank=True, null=True, verbose_name='Tiktok URL')),
                ('whatsapp_url', models.URLField(blank=True, null=True, verbose_name='WhatsApp Business URL')),
                ('telegram_url', models.URLField(blank=True, null=True, verbose_name='Telegram URL')),
                ('linkedin_url', models.URLField(blank=True, null=True, verbose_name='LinkedIn URL')),
                ('email', models.CharField(blank=True, max_length=100, null=True, verbose_name='Contact Email')),
                ('phone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Contact Phone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StandardPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('introduction', models.TextField(blank=True, help_text='Provide a brief introduction or overview for this page.', null=True)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('heading_block', wagtail.blocks.StructBlock([('heading_text', wagtail.blocks.CharBlock(form_classname='title', required=True)), ('size', wagtail.blocks.ChoiceBlock(blank=True, choices=[('', 'Select a header size'), ('h2', 'H2'), ('h3', 'H3'), ('h4', 'H4')], required=False))])), ('paragraph_block', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'link'], icon='pilcrow', template='blocks/paragraph_block.html')), ('image_block', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(required=True)), ('caption', wagtail.blocks.CharBlock(required=False)), ('attribution', wagtail.blocks.CharBlock(required=False))])), ('block_quote', wagtail.blocks.StructBlock([('text', wagtail.blocks.TextBlock()), ('attribute_name', wagtail.blocks.CharBlock(blank=True, label='e.g. John Doe', required=False))])), ('embed_block', wagtail.embeds.blocks.EmbedBlock(help_text='Insert an embed URL', icon='media', template='blocks/embed_block.html'))], blank=True, help_text='Compose the main content for this page. Utilize various content blocks to structure and format the information effectively.', verbose_name='Page body')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('clean_name', models.CharField(blank=True, default='', help_text='Safe name of the form field, the label converted to ascii_snake_case', max_length=255, verbose_name='name')),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('multiselect', 'Multiple select'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time'), ('hidden', 'Hidden field')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.TextField(blank=True, help_text='Comma or new line separated list of choices. Only applicable in checkboxes, radio and dropdown.', verbose_name='choices')),
                ('default_value', models.TextField(blank=True, help_text='Default value. Comma or new line separated values supported for checkboxes.', verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='base.formpage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.CharField(default='Phone Centre', help_text='Enter the text or name for the site logo. This text will be displayed as the logo in the header and footer.', max_length=20, verbose_name='Site Logo')),
                ('branding_title', models.CharField(blank=True, default='Phone Centre', help_text='Enter the title to be displayed in the title tag of the website. If left blank, the default value is "Phone Centre."', max_length=50, null=True, verbose_name='Site Title')),
                ('branding_welcome', models.CharField(blank=True, default='Welcome to Phone Centre CMS', help_text='Enter the welcome text to be displayed on the admin home page. If left blank, the default is "Welcome to Phone Centre CMS."', max_length=100, null=True, verbose_name='Welcome Text')),
                ('branding_login', models.CharField(blank=True, default='Sign in to Phone Centre', help_text='Enter the text to be displayed on the login page. If left blank, the default is "Sign in to Phone Centre."', max_length=100, null=True, verbose_name='Login Text')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
